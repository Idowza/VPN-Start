#!/bin/bash

# Function to handle script termination
cleanup() {
  echo "Received stop signal. Disconnecting Mullvad VPN..."
  mullvad disconnect
  echo "Mullvad VPN disconnected. Exiting."
  exit 0
}

# Trap SIGINT (Ctrl+C) and SIGTERM (sent by 'systemctl stop') to run the cleanup function
trap cleanup SIGINT SIGTERM

# Function to exclude a process PID from Mullvad VPN split tunneling
exclude_pid() {
  local pid=$1
  mullvad split-tunnel add "$pid"
}

# Function to display text in green
display_green() {
  local message=$1
  echo -e "\e[1;32m$message\e[0m"
}

# Function to display text in red
display_red() {
  local message=$1
  echo -e "\e[1;31m$message\e[0m"
}

# Function to exclude PIDs of a process from Mullvad VPN split tunneling
exclude_pids() {
  local process_name=$1
  local pids
  # Corrected pgrep usage
  pids=$(pgrep -f "${process_name}")

  if [[ -n $pids ]]; then
    echo "${process_name} processes running with PIDs: $pids"

    # Exclude each PID from Mullvad VPN split tunneling
    IFS=$'\n' read -rd '' -a pid_array <<< "$pids"
    for pid in "${pid_array[@]}"; do
      exclude_pid "$pid"
    done
  else
    echo "No ${process_name} processes found to exclude."
  fi
}

# --- Configuration ---
# Add process names you want to exclude from the VPN tunnel to this list.
EXCLUDED_PROCESSES=(
    "vnc"
    "plex"
    "prowlarr"
    "radarr"
    "sonarr"
    "ssh"
    "pihole"
    "audio"
    "qemu"
    "virt"
    "libvirtd"
    "bazarr"
    "Readarr"
    "transmission"
)

# --- Main Script ---
echo "Starting VPN script..."

# Exclude PIDs for specified processes by iterating through the array
for process in "${EXCLUDED_PROCESSES[@]}"; do
    exclude_pids "$process"
done

# Start Mullvad VPN
echo "Connecting to Mullvad VPN..."
mullvad connect

# Wait for 3 seconds
sleep 3

# Function to check the connection status of Mullvad VPN
check_vpn_status() {
  local status
  status=$(mullvad status)
  first_word=$(echo "$status" | cut -d ' ' -f1)
  if [[ $first_word == "Connected" ]]; then
    display_green "$status"
  else
    display_red "$status"
  fi
}

# Check the connection status
check_vpn_status

echo "VPN script is running. To stop, use 'systemctl stop vpn-start' or press Ctrl+C."

# Keep the script running to maintain the trap.
# The script will wait here until it receives a signal to terminate.
while true; do
    # Sleep for a long time, but the '&' allows signals to be caught immediately.
    sleep 86400 &
    wait $!
done